4.1 THE WHILE LOOP

- To implement while, for, and do loops
- To avoid infinite loops and off by-one errors
- To understand nested loops
- To implement programs that read and process data stats
- To use a computer for simulations

In a loop, a part of a program is repeated over and over,
until a specific goal is reached. Loops are important for calculations
that require repeated steps and for processing input consisting of many
data items. In this chapter, you will learn about loop statements in C++,
as well as techniques for writing programs that process input and simulate
activites in the real world.

In this section, you will learn how to repeatedly execute statemnents until a goal
has been reached.

Recall the investment problem from Chapter 1. You put 10,000 into a bank
acco unt that earns 5 percent interest per year. How many years does it take
for the account balance to be double the original investment?

In chapter 1 we developed the following algorithm for this problem:

Start with a year of 0, a column for the interest, and a balance of $10,000

Repeat the following steps while the balance is less than $20,000
Add 1 to the year value.
Compute the interest as balance x 0.05 (i.e 5 perecnt interest)
Add the interest to the balance
Report the final year value as the answer.

You now know how to define and update the variables in C++. What you don't
yet know is how to carry out "Repeat steps while the balance is less than $20,000"

SYNTAX 4.1.1: WHILE STATEMENT

In C++, the while statement implements such a repetition

while (condition) {
    statement
}

keeps executign the statements while the condition is true. In our case, we
want to increment the year counter and add interest while the bnalance is less
than the target balance $20,000:

while (balance < TARGET) {
    year++;
    double interest = balance * RATE / 100;
    balance = balance + interest;
}

A while statement is an example of a loop. If you draw a flowchart, the flow
of execution loops again to the point where the condition is tested (Definition of loop:
A sequence of instructions that is executed repeatedly)

When you define a variable inside the loop body, the variable is created for
each iteration of the loop and removed after the end of each iteration. For
example, consider the interest variable in the loop.

while (balance < TARGET) {
    year++;
    double interest = balance * RATE / 100;
    // A new interest variable is created in each iteration.
    balance = balance + interest;
    // interest no longer defined here
}

In contrast, the balance and years variables were defined outside the loop
body. That way, the same variable is used for all iterations of the loop.

Example:

#include <iostream>

using namespace std;

int main() {
    const double RATE = 5;
    const double INITIAL_BALANCE = 10000;
    const double TARGET = 2 * INITIAL_BALANCE;

    double balance = INITIAL_BALANCEE;
    int year = 0;

    while (balance < TARGET) {
        year++;
        double interest = balance * RATE / 100;
        balance = balance + interest;
    }

    cout << "The investment doubled after " << year << " years." << endl;

    return 0;
}

COMMON ERROR 4.1.1 INFINITE LOOPS

A very annoying loop error is an infinte loop: a loop that runs forever and
can be stopped only by killing the program or restarting the computer. If
there are output statements in the program, then line after line of output
flashes by on the screen. Otherwise, the program just sits there and hangs,
seeming to do nothing. On some systems, you can terminate a hanging
program by hitting ctrl + C. On others, you can close the window in which
the program runs.

A common reason for infinite loops is forgetting to update the variable that
controls the loop.

year = 1;
while (year <= 20) {
    balance = balance * (1 + RATE / 100);
}

Here the programmer forgot to add a year++ command in the loop. As a
result, the year always stays at 1, and the loop never comes to an end.

Another common reason for an infinite loop is accidentally incrementing a
counter that should be decremented (or vice versa). Consider this example:

year = 20;
while (year > 0) {
    balance = balance * (1 + RATE / 100);
    year++;
}

The year variable really should have been decremented, not incremented.
This is a common error because incrementing counters is so much more
common than decrementing that your fingers may type the ++ on
autopilot. As a consequence, year is always larger than 0, and the loop
never ends. (Actually, year may eventually exceed the largest
representable positive integer and wrap around to a negative number. Then.
the loop ends - of course, with a completely wrong result.)

COMMON ERROR 4.1.2 DON'T THINK "ARE WE THERE YET?"

When doing something repetitive, most of us want to know when we are
done. For example, you may think "I want to get at least $20,000," and set
the loop condition to

balance >= TARGET

But the while loop thinks the opposite: How long am I allowed to keep
going? The correct loop condition is

while (balance < TARGET)

In other words: "Keep aT it while the balance is less than the target"

COMMON ERROR 4.1.3: OFF BY ONE ERROR.

Consider our computation of the number of years that are required to
double an investment

int year = 0;
while (balance < TARGET) {
    year++;
    double interest = balance * RATE / 100;
    balance = balance + interest;
}

cout << "The investment doubled after " << year << " years." << endl;

Should year start at 0 or at 1? Should you test for balance < TARGET 
or for balance <= TARGET? it is easy to be off by one in these expressions.

Some people try to solve off-by-one errors by randomly inserting +1 or -1
until the program seems to work- a terrible strategy. It can take a long time
to compile and test all the various possibilities. Expending a small amount
of mental effort is a real time saver. (Definition of off-by-one error: A
common programming error in which a value is one larger or smaller than
it should be.)

Fortunately, off-by-one errors are easy to avoid, simply by working through
a couple of test cases and using the information from the test cases to
come up with a rationale for your decisions.

Should year start at 0 or at 1? Look at a scenario with simple values: an
initial balance of $100 and an interest rate of 50 percent. After year 1, the
balance is $150, and after year 2 it is $225, or over $200. So the investment
doubled after 2 years. The loop executed two times, incrementing year 
each time. Hence year must start at 0, not at 1.

In other words, the balance variable denotes the balance after the end of
the year. At the outset, the balance variable contains the balance after
year 0 and not after year 1.

Next, should you use a < or <= comparison in the test? If you want to settle
this question with an example,, you need to find a scenario in which the final
balance is exactly twice the initial balance. This happens when the
interest is 100 percent. The loop executes once. Now year is 1, and
balance is exactly equal to 2 * INITIAL_BALANCE. Has the 
investment doubled after one year? It has, therefore, the loop should not execute again.
If the test condition had been balance <= TARGET, the loop would have executed once more.

In other words, you keep adding interest while the balance has not yet doubled.
