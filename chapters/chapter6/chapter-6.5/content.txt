6.5 PARSING AND FORMATTING STRINGS

Like an adapter that converts your power plugs to
international outlets, the string stream adapters allow
you to access strings as streams.

In the preceding sections, you saw how file streams read
characters from a file and write characters to a file. The
istringstream classes reads characters from a string, and the
ostringstream classes writes characters to a string. That 
doesn't sound so exciting -- we already know how to access and
change the characters of a string. However, the string stream
classes have the same public interface as the other stream
classes. In par ticular, you can use the familiar >> and <<
operators to read and write numbers that are contained in 
strings. For that reason, the istringstream and ostringstreams
are called adapters -- they adapt strings to the stream interface.
Include the <sstream> header when you use string streams.
(Definition of public interface: The features (functions, variables,
and nested types) of a class that are accessible to all clients.)

Here is a typical example. Suppose the string date contains a 
date such as "January 24, 1973", and we want to separate 
it into month, day and year. First, construct an
istring stream Object. Then use the str function to set the
stream to the string that you want to read.

istringstream strm;
strm.str("January 24, 1973");

Next, simply use the >> operator to read the month name, the
day, and comman separator, and the year:

string month;
int day;
string comma;
int year;
strm >> month >> day >> comma >> year;

Now month is "January", and day is 24, and year is 1973. Note
that this input statements yields day and year as integers. Had we taken
the string apart with substr, we would have obtained only strings, not numbers.

If you only need to convert a single string to its int or double
value, you can instead use the functions stoi and stod

string year = "1973";
int y = stoi(year); // Sets y to the integer 1973

These functions are available since C++ 11. If you have an older
version of C++, use a helper function for this purpose.

int string_to_int(string s) {
    istringstream strm;
    strm.str(s);
    int n = 0;
    strm >> n;
    return n;
}

By writing to a string stream, you can convert integers or
floating-point numbers to strings. First construct an
ostringstream object:

ostringstream strm;

Next, use the << operator to add a number to the stream. The
number is converted into a sequence of characters:

strm << fixed << setprecision(5) << 10.0 / 3;

Now the stream contains the string "3.33333". To obtain that
string from the stream, call the str member function:

string output = strm.str();

You can build up more complex strings in the same way. Here
we build a data string of the month, day, and year.

string month = "January";
int day = 04;
int year = 1973;
ostringstream strm;
strm << month << " " << setw(2) << " " << setfill('0') << day << ", " << year;
string output = strm.str();

Now output is the string "January 04, 1973". Note that
we converted the integers day and year into a string.

if you don't need formatting,  you can use the to_string
function to convert numbers to strings. For example,
to-string(1973) is the string "1973"

You can produce a formatted date, without a leading zero for
days less than ten, like this:

string output = month + " " + to_string(day) + ", " + to_string(year);

